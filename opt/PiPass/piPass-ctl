#!/bin/sh

usage() {
    echo "Syntax: $0 COMMAND"
    echo '
Service commands:
    advance     - Advance to the next Nintendo Zone immediatly
    reload      - Reload settings
    start       - (Re-)Start PiPass
    status      - Show current PiPass status
    stop        - Stop PiPass

System commands:
    pi-netreset - Resets the system'\''s network configuration and reboots it!
    pi-reboot   - Restarts the entire system!
    pi-shutdown - Shuts down the entire system!

Other commands:
    backup      - Creates a backup of the current PiPass installation
    restore     - Restores a Pipass installation that was previously crated with "backup"
                  Note: This will also cause your settings to be reverted to the time when the backup was created
    update      - Updates PiPass to the newest version
    dashboard   - Let'\''s you point PiPass to the new location of the PiPass dashboard.
    help        - Shows this help text'
}

show_error() {
    MSG="PiPass $COMMAND: An error occured."
    if [ -n "$1" ]; then
        MSG="$1"
    fi

    echo "ERROR: $MSG" >&2
    logger -t 'piPass-ctl ERROR' "$MSG"
}

COMMAND="$1"

if [ "$COMMAND" = 'dashboard' ]; then
    if [ $# -ne 2 ]; then
        show_error 'Please supply exactly 1 argument: The new location of the PiPass dashboard.'
        if [ -n "$PS1" ]; then
            usage >&2
        fi
        exit 2
    fi
elif [ $# -ne 1 ]; then
    show_error 'No arguments allowed.'
    if [ -n "$PS1" ]; then
        usage >&2
    fi
    exit 2
fi

if [ -z "$PS1" ]; then
    logger -t 'piPass-ctl' "COMMAND: $*"
fi

set_dashboard() {
    # local configdir="$(dirname "$0")/config"
    local configdir="/opt/PiPass/config"

    if [ ! -d "$configdir" ]; then
        mkdir "$configdir" || return 1
    fi
    # sed: strip surrounding whitespaces and ensure trailing /
    echo "$(echo "$1" | sed -r '
        s#^\s+##;
        s#/? *$#/#;
        s#^.*$#{"DASHBOARD":"\0"}#')" > "$configdir/pipass_dashboard.json" || return 1
}

do_advance() {
    pkill --signal SIGUSR2 -f piPass.py
    return $?
}

do_reload() {
    pkill --signal SIGUSR1 -f piPass.py
    return $?
}

do_stop() {
    service hostapd stop 2>/dev/null
    killall hostapd 2>/dev/null
    sleep 1
    killall -9 hostapd 2>/dev/null
    pkill --signal SIGQUIT -f piPass.py
    return $?
}

do_start() {
    # note: original stop only sent SIGQUIT without stopping hostapd
    do_stop
    python /opt/PiPass/piPass.py > /dev/null 2>/dev/null &
    return $?
}

do_pireboot() {
    do_stop
    /sbin/shutdown -r now
    return $?
}

do_pinetreset() {
    do_stop
    rm /etc/udev/rules.d/70-persistent-net.rules
    do_pireboot
    return $?
}

do_pishutdown() {
    do_stop
    /sbin/shutdown -P now
    return $?
}

get_pipasswebroot() {
    sed 's/^.*"\([^"]\+\)".*$/\1/;s#\\/#/#g' /opt/PiPass/config/pipass_dashboard.json
}

install_update_dependencies() {

    # 7z is a required component for the update process, enforce that dependency.
    if ! which 7z > /dev/null; then
        apt-get install p7zip-full -y
    fi
    if ! which 7z > /dev/null; then
        show_error 'Failed to install 7z'
        return 1
    fi

    return 0
}

set_permissions() {
    local webroot="$1"
    local webconfig="${1}config"

    chmod -R -v 755 /opt/PiPass/

    if [ -n "$webroot" ]; then
        chmod -R -v 755 "$webroot"
    fi

    if [ -n "$webconfig" ]; then
        chmod -R -v 755 "$webconfig"
        chown -R -v www-data:www-data "$webconfig"
    fi
}

do_backup_create() {

    echo 'Creating backup in /root ...'
    local bkpfile="pipass_backup_$(date +%s).tar.gz"
    local webroot="$1"
echo "$@"

    tar -czvf "/root/$bkpfile" /opt/PiPass/ "$webroot" || return 1

    # symlink the just created backup
    ln -sf "$bkpfile" /root/pipass_backup_latest.tar.gz
}

# accepts a backup-file as argument
do_backup_restore() {

    local bkpfile="/root/pipass_backup_latest.tar.gz"

    tar -xzvf "$bkpfile" --same-owner --directory / || return 1
}

# exitcode > 1 indicated that a rollback is needed
do_update() {

    do_stop

    install_update_dependencies || return 1

    ZIPDOWNLOADURL="https://github.com/sheepluva/PiPass/archive/master.zip"

    if [ ! -d /tmp/PiPass ]; then
        mkdir -p /tmp/PiPass || return 1
    else
        rm -r /tmp/PiPass/* 2>/dev/null
    fi

    DESTFILE=/tmp/PiPass/master.zip

    # Download the latest version of PiPass from the master branch.
    wget -q -O "$DESTFILE" "$ZIPDOWNLOADURL" || return 1

    if [ ! -f "$DESTFILE" ]; then
        return 1
    fi

    # Get the installation path of the PiPass Dashboard.
    PIPASSWEBROOT="$(get_pipasswebroot)"

    if [ -z "$PIPASSWEBROOT" ] && [  ]; then
        echo 'Failed to read dashboard location from /opt/PiPass/config/pipass_dashboard.json' >&2
        return 1
    fi

    echo "PiPass Dashboard installation path: $PIPASSWEBROOT"

    # Prepare for the update process.
    7z x /tmp/PiPass/master.zip -o/tmp/PiPass/ -y || return 1

    # Backup the PiPass settings.
    cp -v /opt/PiPass/config/pipass_dashboard.json /tmp/PiPass/ || return 1

    cp -v "${PIPASSWEBROOT}config/pipass_config.json" /tmp/PiPass/ || return 1

    # Ensure permissions are correct before the upgrading process.
    chmod -R 700 /tmp/PiPass/

    # Archive, then remove the old version of PiPass.
    do_backup_create "$PIPASSWEBROOT"

    # Delete old backups
    echo 'Purging old backups...'
    find /root -maxdepth 1 -type f -name 'pipass_backup_*.zip' -mtime +30 -delete

    # Update PiPass to the latest version.
    rm -r /opt/PiPass/*
    cp -r /tmp/PiPass/PiPass-master/opt/PiPass/* /opt/PiPass/ || return 2

    rm -r "$PIPASSWEBROOT"*
    cp -r /tmp/PiPass/PiPass-master/var/www/*  "$PIPASSWEBROOT" || return 2

    cp /tmp/PiPass/pipass_dashboard.json /opt/PiPass/config/ || return 2

    WEBCONFIGDIR="$PIPASSWEBROOT/config"

    if [ ! -d "$WEBCONFIGDIR" ]; then
        mkdir -p "$WEBCONFIGDIR" || return 1
    fi

    cp -v /tmp/PiPass/pipass_config.json "$WEBCONFIGDIR" || return 2

    # Ensure permissions are correct for after the upgrading process.
    set_permissions "$PIPASSWEBROOT" || return 2

    return 0
}

exitcode=0

case "$COMMAND" in
    advance)
        do_advance || exitcode=1
        ;;
    status)
        echo TODO
        ;;
    reload)
        do_reload || exitcode=1
        ;;
    start)
        do_start || exitcode=1
        ;;
    stop)
        do_stop || exitcode=1
        ;;
    pi-reboot)
        do_pireboot || exitcode=1
        ;;
    pi-shutdown)
        do_pishutdown || exitcode=1
        ;;
    pi-netreset)
        do_netreset || exitcode=1
        ;;
    update)
        do_update || exitcode=1
        if [ $exitcode -gt 1 ]; then
            echo 'ERROR: Update failed! Starting rollback...'
            do_backup_restore
        fi
        # Cleanup the temporary files used in upgrading PiPass.
        echo 'Cleaning up...'
        rm -rf /tmp/PiPass/
        ;;
    backup)
        do_backup_create "$(get_pipasswebroot)" || exitcode=1
        ;;
    restore)
        do_stop
        do_backup_restore || exitcode=1
        ;;
    dashboard)
        set_dashboard "$2" || exitcode=1
        ;;
    help | -h | --help)
        usage
        ;;
esac

if [ $exitcode -ne 0 ]; then
   show_error
fi

exit $exitcode

